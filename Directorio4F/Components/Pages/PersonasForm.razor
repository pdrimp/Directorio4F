@page "/personas/nueva"
@page "/personas/editar/{Id:int}"
@rendermode InteractiveServer
@inject NavigationManager _navigationManager
@inject IRepositorioPersonas _repositorioPersonas
@inject IRepositorioClasificaciones _repositorioClasificaciones
@inject IRepositorioHabitos _repositorioHabitos
<PageTitle>Personas</PageTitle>
<h3>@_mensaje Persona</h3>
@if (_clasificaciones == null)
{
    <p>Cargando clasificaciones...</p>
}
else
{
    <EditForm Model="_persona" FormName="frmPersona" OnValidSubmit="Guardar">
        <DataAnnotationsValidator />
        <div class="mb-3 row">
            <label for="txtNombre" class="col-sm-2 col-form-label">Nombre</label>
            <div class="col-sm-10">
                <InputText class="form-control" id="txtNombre" @bind-Value="_persona.Nombre" />
                <ValidationMessage For="@(() => _persona.Nombre)" />
            </div>
        </div>
        <div class="mb-3 row">
            <label for="txtCorreo" class="col-sm-2 col-form-label">Correo</label>
            <div class="col-sm-10">
                <InputText class="form-control" id="txtCorreo" @bind-Value="_persona.Correo" />
                <ValidationMessage For="@(() => _persona.Correo)" />
            </div>
        </div>
        <div class="mb-3 row">
            <label for="txtTelefono" class="col-sm-2 col-form-label">Teléfono</label>
            <div class="col-sm-10">
                <InputText class="form-control" id="txtTelefono" @bind-Value="_persona.Telefono" />
                <ValidationMessage For="@(() => _persona.Telefono)" />
            </div>
        </div>
        <div class="mb-3 row">
            <label for="txtClasificacion" class="col-sm-2 col-form-label">Clasificación</label>
            <div class="col-sm-10">
                <InputSelect @bind-Value="_persona.ClasificacionId" class="form-select" id="txtClasificacion">
                    <option value="">-- Selecciona --</option>
                    @foreach (var clasificacion in _clasificaciones)
                    {
                        <option value="@clasificacion.Id">@clasificacion.Nombre</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => _persona.ClasificacionId)" />
            </div>
        </div>

        <div class="mb-3 row">
            <label for="txtHabitos" class="col-sm-2 col-form-label">Hábitos</label>
            <div class="col-sm-10">
                <div class="form-group">
                    @foreach (Habito habito in _habitos)
                    {
                        <div class="form-check">
                            <input class="form-check-input"
                                   type="checkbox"
                                   id="checkbox-@habito.Id"
                                   @onchange="e => OnCheckboxChanged(e, habito.Id)"
                                   checked="@_habitosIdSeleccionados.Contains(habito.Id)" />

                            <label class="form-check-label" for="checkbox-@habito.Id">
                                @habito.Nombre
                            </label>
                        </div>
                    }
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-sm-10 offset-sm-2">
                <button type="submit" class="btn btn-primary">Guardar</button>
                <a class="btn btn-danger" href="/personas">Cancelar</a>
            </div>
        </div>
    </EditForm>
}


@code {
    [Parameter]
    public int Id { get; set; }
    private Persona _persona = new();
    private string _mensaje = "Nueva ";
    private List<Clasificacion>? _clasificaciones;
    private List<Habito> _habitos = new();
    private List<int> _habitosIdSeleccionados = new();

    protected override async Task OnInitializedAsync()
    {
        _clasificaciones = await _repositorioClasificaciones.GetAll();
        _habitos = await _repositorioHabitos.GetAll();
        if (Id > 0)
        {
            _persona = await _repositorioPersonas.Get(Id);
            _mensaje = "Modificar ";
            if (_persona.Habitos != null)
            {
                foreach (var habito in _persona.Habitos)
                {
                    _habitosIdSeleccionados.Add(habito.Id);
                }
            }
        }
    }

    private async Task Guardar()
    {
        _persona.Habitos = new List<Habito>();
        foreach (int id in _habitosIdSeleccionados)
        {
            var habito = await _repositorioHabitos.Get(id);
            if (habito != null)
            {
                _persona.Habitos.Add(habito);
            }
        }
        if (Id > 0)
        {
            await _repositorioPersonas.Update(_persona);
        }
        else
        {
            await _repositorioPersonas.Add(_persona);
        }
        _navigationManager.NavigateTo("/personas");
    }

    private void OnCheckboxChanged(ChangeEventArgs e, int id)
    {
        bool isChecked = (bool)e.Value;

        if (isChecked)
        {
            if (!_habitosIdSeleccionados.Contains(id))
                _habitosIdSeleccionados.Add(id);
        }
        else
        {
            _habitosIdSeleccionados.Remove(id);
        }
    }
}
